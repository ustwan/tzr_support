"""
Telegram Bot –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π.
–ö–ª–∞—Å—Å-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å WebSocket –∫–ª–∏–µ–Ω—Ç–æ–º.
"""

import os
import logging
from datetime import datetime
from zoneinfo import ZoneInfo
from typing import Optional, Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from telegram.error import TelegramError

from rate_limiter import get_limiter
from ticket_counter import get_counter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
NICKNAME, CATEGORY, MESSAGE = range(3)


class TelegramFeedbackBot:
    """
    Telegram –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π.
    
    –§—É–Ω–∫—Ü–∏–∏:
    1. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π —Å —Å–∞–π—Ç–∞ –≤ Telegram –≥—Ä—É–ø–ø—É (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ WebSocket)
    2. –ü—Ä–∏—ë–º –æ–±—Ä–∞—â–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é –≤ –õ–° –±–æ—Ç–∞ (–∫–æ–º–∞–Ω–¥–∞ /feedback)
    3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞."""
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.channel_id = os.getenv('FEEDBACK_TELEGRAM_CHANNEL_ID')
        
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN not set in environment")
        
        if not self.channel_id:
            raise ValueError("FEEDBACK_TELEGRAM_CHANNEL_ID not set in environment")
        
        self.application = None
        self.bot = Bot(token=self.bot_token)
        
        logger.info("‚úÖ TelegramFeedbackBot initialized")
    
    async def send_feedback_to_telegram(
        self,
        feedback_id: int,
        telegram_id: int,
        telegram_username: str,
        telegram_first_name: str,
        nickname: str,
        category: str,
        message: str,
        created_at: Optional[str] = None,
        source: str = 'website'
    ) -> Dict:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ Telegram –≥—Ä—É–ø–ø—É.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ WebSocket –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            feedback_id: ID –æ–±—Ä–∞—â–µ–Ω–∏—è (0 –¥–ª—è auto-gen)
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_username: Username (–±–µ–∑ @)
            telegram_first_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            nickname: –ù–∏–∫ –≤ –∏–≥—Ä–µ
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è (bug, wish, question, other)
            message: –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è
            created_at: –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (ISO format)
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ (website –∏–ª–∏ telegram_bot)
        
        Returns:
            Dict —Å ticket_id, message_id, sent_at
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ticket_id
        counter = get_counter()
        
        if source == 'telegram_bot':
            ticket_id = counter.get_next_tg()
        else:
            if feedback_id > 0:
                ticket_id = f"ticket_site_{feedback_id}"
            else:
                ticket_id = counter.get_next_site()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_message = self._format_feedback_message(
            ticket_id=ticket_id,
            telegram_id=telegram_id,
            telegram_username=telegram_username,
            telegram_first_name=telegram_first_name,
            nickname=nickname,
            category=category,
            message=message,
            created_at=created_at,
            source=source
        )
        
        # –°–æ–∑–¥–∞—ë–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
        keyboard = [
            [
                InlineKeyboardButton("üëÄ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ", callback_data=f"status_{ticket_id}_read"),
                InlineKeyboardButton("‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ", callback_data=f"status_{ticket_id}_in_progress"),
            ],
            [
                InlineKeyboardButton("‚úÖ –û—Ç–≤–µ—Ç–∏–ª–∏", callback_data=f"status_{ticket_id}_replied"),
                InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç–æ", callback_data=f"status_{ticket_id}_closed"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        try:
            sent_message = await self.bot.send_message(
                chat_id=self.channel_id,
                text=formatted_message,
                parse_mode='HTML',
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )
            
            logger.info(f"‚úÖ Ticket {ticket_id} sent to Telegram (message_id={sent_message.message_id})")
            
            return {
                'ticket_id': ticket_id,
                'message_id': sent_message.message_id,
                'sent_at': datetime.now().isoformat()
            }
        
        except TelegramError as e:
            logger.error(f"‚ùå Telegram error for ticket {ticket_id}: {e}")
            # Flood control - –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É
            if "Flood control" in str(e) or "Too Many Requests" in str(e):
                logger.warning(f"Flood control hit for {ticket_id}, queued")
                return {
                    'ticket_id': ticket_id,
                    'message_id': 0,
                    'sent_at': datetime.now().isoformat()
                }
            raise
    
    def _format_feedback_message(
        self,
        ticket_id: str,
        telegram_id: int,
        telegram_username: str,
        telegram_first_name: str,
        nickname: str,
        category: str,
        message: str,
        created_at: Optional[str],
        source: str
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram."""
        # –ò–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_icons = {
            'bug': 'üêõ',
            'wish': 'üí°',
            'question': '‚ùì',
            'other': 'üí¨'
        }
        
        category_names = {
            'bug': '–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ',
            'wish': '–ü–æ–∂–µ–ª–∞–Ω–∏—è',
            'question': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
            'other': '–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å'
        }
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if telegram_username:
            username = f"@{telegram_username}"
        else:
            username = f"ID{telegram_id}"
        
        if telegram_first_name:
            name = f" ({telegram_first_name})"
        else:
            name = ""
        
        user_info = f"{username}{name}"
        
        # –ù–∏–∫ –≤ –∏–≥—Ä–µ
        nickname_text = nickname if nickname else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –∏–∫–æ–Ω–∫–æ–π
        icon = category_icons.get(category, 'üí¨')
        category_text = category_names.get(category, category)
        
        # –î–∞—Ç–∞ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π —Ç–∞–π–º–∑–æ–Ω–µ
        moscow_tz = ZoneInfo("Europe/Moscow")
        
        if created_at:
            try:
                dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                dt_moscow = dt.astimezone(moscow_tz)
                date_str = dt_moscow.strftime('%d.%m.%Y %H:%M')
            except:
                date_str = created_at
        else:
            dt_moscow = datetime.now(moscow_tz)
            date_str = dt_moscow.strftime('%d.%m.%Y %H:%M')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        source_icons = {
            'website': 'üåê',
            'telegram_bot': 'üí¨'
        }
        source_names = {
            'website': '–°–∞–π—Ç',
            'telegram_bot': '–õ–° —Å –±–æ—Ç–æ–º'
        }
        source_icon = source_icons.get(source, 'üì±')
        source_name = source_names.get(source, source or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # HTML escape
        message_escaped = (message
                          .replace('&', '&amp;')
                          .replace('<', '&lt;')
                          .replace('>', '&gt;'))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = f"""üÜï <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ {ticket_id}</b>

üë§ <b>–û—Ç:</b> {user_info}
üìù <b>–ù–∏–∫ –≤ –∏–≥—Ä–µ:</b> {nickname_text}
üè∑Ô∏è <b>–¢–µ–º–∞:</b> {icon} {category_text}
{source_icon} <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source_name}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
{message_escaped}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

üìÖ <b>–î–∞—Ç–∞:</b> {date_str}

#{category} #new"""
        
        return msg
    
    async def _callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤."""
        query = update.callback_query
        
        try:
            await query.answer()
        except Exception as e:
            logger.warning(f"Failed to answer query: {e}")
            return
        
        callback_data = query.data
        logger.info(f"Received callback: {callback_data}")
        
        # –ü–∞—Ä—Å–∏–º callback data: "status_{ticket_id}_{new_status}"
        if not callback_data.startswith('status_'):
            logger.warning(f"Invalid callback format: {callback_data}")
            return
        
        rest = callback_data[7:]  # —É–±–∏—Ä–∞–µ–º "status_"
        
        # –°—Ç–∞—Ç—É—Å—ã
        possible_statuses = ['new', 'read', 'in_progress', 'replied', 'closed']
        
        ticket_id = None
        new_status = None
        
        for status in possible_statuses:
            if rest.endswith('_' + status):
                new_status = status
                ticket_id = rest[:-(len(status) + 1)]
                break
        
        if not ticket_id or not new_status:
            logger.warning(f"Could not parse callback: {callback_data}")
            return
        
        logger.info(f"Parsed: ticket_id={ticket_id}, new_status={new_status}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            status_icons = {
                'new': 'üÜï',
                'read': 'üëÄ',
                'in_progress': '‚öôÔ∏è',
                'replied': '‚úÖ',
                'closed': 'üîí'
            }
            
            status_names = {
                'new': '–ù–æ–≤–æ–µ',
                'read': '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ',
                'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
                'replied': '–û—Ç–≤–µ—Ç–∏–ª–∏',
                'closed': '–ó–∞–∫—Ä—ã—Ç–æ'
            }
            
            icon = status_icons.get(new_status, 'üìù')
            name = status_names.get(new_status, new_status)
            
            old_text = query.message.text or query.message.caption
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ö–µ—à—Ç–µ–≥ —Å—Ç–∞—Ç—É—Å–∞
            import re
            new_text = re.sub(r'#(new|read|in_progress|replied|closed)$', f'#{new_status}', old_text)
            new_text = re.sub(r'üÜï <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ', f'{icon} <b>–û–±—Ä–∞—â–µ–Ω–∏–µ', new_text)
            
            await query.edit_message_text(
                text=new_text,
                parse_mode='HTML',
                reply_markup=query.message.reply_markup
            )
            
            await query.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω: {name}")
            logger.info(f"Ticket {ticket_id} status changed to {new_status}")
        
        except Exception as e:
            logger.error(f"Error updating status: {e}")
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def _start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        user = update.effective_user
        
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            f"–Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π TZReloaded.\n\n"
            f"üìù –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /feedback\n"
            f"‚ùì –ü–æ–º–æ—â—å: /help"
        )
    
    async def _help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        await update.message.reply_text(
            "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
            "/feedback - –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ\n"
            "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ:</b>\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /feedback\n"
            "2. –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –≤ –∏–≥—Ä–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ)\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
            "4. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–û–±—Ä–∞—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!",
            parse_mode='HTML'
        )
    
    async def _feedback_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è."""
        user = update.effective_user
        
        # Rate limiting
        limiter = get_limiter()
        allowed, remaining, reset_in = limiter.check(user.id)
        
        if not allowed:
            await update.message.reply_text(
                "‚è±Ô∏è –û—Ç –≤–∞—Å –±—ã–ª–æ –º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 –º–∏–Ω—É—Ç.",
                parse_mode='HTML'
            )
            return ConversationHandler.END
        
        await update.message.reply_text(
            "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –≤ –∏–≥—Ä–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
            parse_mode='HTML'
        )
        return NICKNAME
    
    async def _skip_nickname(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–ø—É—Å–∫ –Ω–∏–∫–∞."""
        context.user_data['nickname'] = ''
        return await self._ask_category(update, context)
    
    async def _receive_nickname(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–∞."""
        context.user_data['nickname'] = update.message.text.strip()
        return await self._ask_category(update, context)
    
    async def _ask_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        keyboard = [
            [
                InlineKeyboardButton("üêõ –°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ", callback_data="cat_bug"),
                InlineKeyboardButton("üí° –ü–æ–∂–µ–ª–∞–Ω–∏—è", callback_data="cat_wish"),
            ],
            [
                InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="cat_question"),
                InlineKeyboardButton("üí¨ –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å", callback_data="cat_other"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üè∑Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return CATEGORY
    
    async def _receive_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        query = update.callback_query
        await query.answer()
        
        category = query.data.replace('cat_', '')
        context.user_data['category'] = category
        
        category_names = {
            'bug': 'üêõ –°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ',
            'wish': 'üí° –ü–æ–∂–µ–ª–∞–Ω–∏—è',
            'question': '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
            'other': 'üí¨ –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å'
        }
        
        await query.edit_message_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {category_names.get(category, category)}\n\n"
            f"üí¨ <b>–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:</b>\n"
            f"(–æ—Ç 10 –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤)",
            parse_mode='HTML'
        )
        return MESSAGE
    
    async def _receive_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞."""
        message_text = update.message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if len(message_text) < 10:
            await update.message.reply_text(
                "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:"
            )
            return MESSAGE
        
        if len(message_text) > 2000:
            await update.message.reply_text(
                "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ:"
            )
            return MESSAGE
        
        user = update.effective_user
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è WebSocket
        try:
            result = await self.send_feedback_to_telegram(
                feedback_id=0,
                telegram_id=user.id,
                telegram_username=user.username or '',
                telegram_first_name=user.first_name or '',
                nickname=context.user_data.get('nickname', ''),
                category=context.user_data['category'],
                message=message_text,
                created_at=None,
                source='telegram_bot'
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ rate limiter
            limiter = get_limiter()
            limiter.record(user.id)
            
            ticket_id = result['ticket_id']
            
            await update.message.reply_text(
                f"‚úÖ <b>–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                f"–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: <code>{ticket_id}</code>\n\n"
                f"–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n"
                f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üôè",
                parse_mode='HTML'
            )
            logger.info(f"Ticket {ticket_id} from LS user {user.id} sent successfully")
        
        except Exception as e:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            logger.exception(f"Error sending feedback from LS: {e}")
        
        context.user_data.clear()
        return ConversationHandler.END
    
    async def _cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è."""
        context.user_data.clear()
        await update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
            "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /feedback"
        )
        return ConversationHandler.END
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (polling)."""
        logger.info("üöÄ Starting Telegram bot polling...")
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(self.bot_token).build()
        
        # ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π
        feedback_conv = ConversationHandler(
            entry_points=[CommandHandler('feedback', self._feedback_start)],
            states={
                NICKNAME: [
                    CommandHandler('skip', self._skip_nickname),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._receive_nickname)
                ],
                CATEGORY: [
                    CallbackQueryHandler(self._receive_category, pattern='^cat_')
                ],
                MESSAGE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._receive_message)
                ]
            },
            fallbacks=[CommandHandler('cancel', self._cancel_command)],
            allow_reentry=True
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler('start', self._start_command))
        self.application.add_handler(CommandHandler('help', self._help_command))
        self.application.add_handler(CallbackQueryHandler(self._callback_handler, pattern='^status_'))
        self.application.add_handler(feedback_conv)
        
        logger.info("‚úÖ Telegram bot handlers registered")
        logger.info("   - Commands: /start, /help, /feedback, /cancel")
        logger.info("   - Status management via inline buttons")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        try:
            while True:
                await asyncio.sleep(1)
        except asyncio.CancelledError:
            logger.info("üõë Telegram bot polling stopped")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞."""
        logger.info("üõë Stopping Telegram bot...")
        if self.application:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
        logger.info("‚úÖ Telegram bot stopped")


# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
import asyncio

